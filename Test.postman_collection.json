{
	"info": {
		"_postman_id": "45808da1-a125-4017-92df-aa0d6d7b9304",
		"name": "Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16201781",
		"_collection_link": "https://martian-water-927687.postman.co/workspace/API_REST_gorest.co.in~0177ded7-8a0f-49ee-8bd7-d3ccf75e4118/collection/16201781-45808da1-a125-4017-92df-aa0d6d7b9304?action=share&source=collection_link&creator=16201781"
	},
	"item": [
		{
			"name": "GET ALL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Extrair os campos do JSON de resposta\r",
							"var jsonResponse = pm.response.json();\r",
							"\r",
							"pm.test(\"Retorno em formato JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Código de Status é 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Tempo de resposta menor do que 20000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(20000);\r",
							"}); \r",
							"\r",
							"// Capturar todos os campos da request e definir como variáveis de ambiente\r",
							"pm.environment.set(\"id\", jsonResponse[0].id);\r",
							"pm.environment.set(\"name\", jsonResponse[0].name);\r",
							"pm.environment.set(\"email\", jsonResponse[0].email);\r",
							"pm.environment.set(\"gender\", jsonResponse[0].gender);\r",
							"pm.environment.set(\"status\", jsonResponse[0].status);\r",
							"\r",
							"// Log dos campos capturados para verificação\r",
							"console.log(\"ID: \" + jsonResponse[0].id);\r",
							"console.log(\"Name: \" + jsonResponse[0].name);\r",
							"console.log(\"Email: \" + jsonResponse[0].email);\r",
							"console.log(\"Gender: \" + jsonResponse[0].gender);\r",
							"console.log(\"Status: \" + jsonResponse[0].status);\r",
							"\r",
							"// Delay de 10 Segundos\r",
							"// setTimeout(function(){}, 1000);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{endpoint}}",
					"host": [
						"{{url}}{{endpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Retorno em formato JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Código de Status é 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Tempo de resposta menor do que 20000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(20000);\r",
							"}); \r",
							"\r",
							"// Armazena o \"id\" da solicitação em uma variável\r",
							"var idDaSolicitacao = pm.response.json().id;\r",
							"\r",
							"// Obtém o \"id\" da variável no Postman\r",
							"var idDaVariavel = pm.variables.get(\"id\");\r",
							"\r",
							"// Compara os valores e registra o resultado do teste\r",
							"pm.test(\"O id da solicitação é igual ao id da variável: \" + idDaVariavel, function () {\r",
							"    pm.expect(idDaSolicitacao).to.equal(parseInt(idDaVariavel));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Todos os campos esperados estão presentes na resposta\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    if (Array.isArray(jsonData)) {\r",
							"        jsonData.forEach(function(item) {\r",
							"            pm.expect(item).to.have.all.keys(\"id\", \"name\", \"email\", \"gender\", \"status\");\r",
							"        });\r",
							"    } else {\r",
							"        console.log(\"Os dados retornados não estão em um formato de array.\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{endpoint}}{{id}}",
					"host": [
						"{{url}}{{endpoint}}{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET ID - Params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Retorno em formato JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Código de Status é 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Tempo de resposta menor do que 20000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(20000);\r",
							"}); \r",
							"\r",
							"var id = pm.variables.get(\"id\");\r",
							"pm.test(\"ID retornado corresponde ao solicitado: \" + id, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var found = false;\r",
							"    jsonData.forEach(function(item) {\r",
							"        if (item.id === parseInt(id)) {\r",
							"            found = true;\r",
							"            return;\r",
							"        }\r",
							"    });\r",
							"    pm.expect(found).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Todos os campos esperados estão presentes na resposta\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.all.keys(\"id\", \"name\", \"email\", \"gender\", \"status\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{endpoint}}?id={{id}}",
					"host": [
						"{{url}}{{endpoint}}"
					],
					"query": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Tempo de resposta menor do que 20000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(20000);\r",
							"}); \r",
							"\r",
							"pm.test(\"Código de Status é 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Extrair o \"id\" da resposta JSON\r",
							"var responseBody = pm.response.json();\r",
							"var id = responseBody.id;\r",
							"\r",
							"// Armazenar o \"id\" em uma variável do Postman\r",
							"pm.environment.set(\"id_Post\", id);\r",
							"\r",
							"// Testar se o \"id\" foi armazenado corretamente\r",
							"pm.test(\"O id foi armazenado corretamente na variável de ambiente: \" + id, function () {\r",
							"    // Obter o \"id\" armazenado na variável de ambiente\r",
							"    var idStored = pm.environment.get(\"id_Post\");\r",
							"    \r",
							"    // Verificar se o \"id\" armazenado é igual ao \"id\" extraído da resposta\r",
							"    pm.expect(idStored).to.eql(id);\r",
							"});\r",
							"\r",
							"// Imprimir o \"id\" capturado\r",
							"console.log(\"O id capturado é: \" + id);\r",
							"\r",
							"// Delay de 2 Segundos para armazenar o Id na variável\r",
							"setTimeout(function(){}, 2000);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer b7e0f9be923eabf55779250a1266ee97af8c9a99adc308e0d1e5d920ba4d96aa",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Maria Silva\",\r\n    \"email\": \"mariasilva@example\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{endpoint}}",
					"host": [
						"{{url}}{{endpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Tempo de resposta menor do que 20000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(20000);\r",
							"}); \r",
							"\r",
							"pm.test(\"Código de Status é 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer b7e0f9be923eabf55779250a1266ee97af8c9a99adc308e0d1e5d920ba4d96aa"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Maria Silva Oliveira\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{endpoint}}{{id_Post}}",
					"host": [
						"{{url}}{{endpoint}}{{id_Post}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE ID_POST - Token Valido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Tempo de resposta menor do que 20000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(20000);\r",
							"}); \r",
							"\r",
							"pm.test(\"Código de Status é 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer b7e0f9be923eabf55779250a1266ee97af8c9a99adc308e0d1e5d920ba4d96aa"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{endpoint}}{{id_Post}}",
					"host": [
						"{{url}}{{endpoint}}{{id_Post}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE ID - Token 999 - Invalido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Retorno em formato JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Tempo de resposta menor do que 20000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(20000);\r",
							"});\r",
							"\r",
							"// Autenticação Status Code = 401\r",
							"pm.test(\"Código de Status é 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar mensagem de erro 'Invalid token'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid token\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 99999"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{endpoint}}{{id_Post}}",
					"host": [
						"{{url}}{{endpoint}}{{id_Post}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE ID_POST - ID Invalido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Retorno em formato JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Tempo de resposta menor do que 20000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(20000);\r",
							"}); \r",
							"\r",
							"pm.test(\"Código de Status é 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar mensagem de erro 'Resource not found'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Resource not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer b7e0f9be923eabf55779250a1266ee97af8c9a99adc308e0d1e5d920ba4d96aa"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{endpoint}}999",
					"host": [
						"{{url}}{{endpoint}}999"
					]
				}
			},
			"response": []
		}
	]
}